# -*- coding: utf-8 -*-
"""deep-learning-traffic-sign-classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WAH0XLG-hLv03zqVXCV_HsoSOjEYkus7
"""

# getting the dataset from the repository!
!git clone https://github.com/OptimizedFunction/GTSRB-Traffic-Sign-Classifier.git

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt #to plot accuracy
import cv2
import tensorflow as tf
from PIL import Image
import os
from sklearn.model_selection import train_test_split  #to split training and testing data
import keras
from keras.utils import to_categorical  #to convert the labels present in y_train and t_test into one-hot encoding
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout  #to create CNN

data = []
labels = []
classes = 43
cur_path = "/content/GTSRB-Traffic-Sign-Classifier/GTSRB Dataset"

#Retrieving the images and their labels
for i in range(classes):
    path = os.path.join(cur_path,"Train",str(i))
    images = os.listdir(path)
    for a in images:
        try:
            image = Image.open(path + "/" + a)
            image = image.resize((30,30))
            image = np.array(image)

            data.append(image)
            labels.append(i)
        except:
            print("Error loading image")

#Converting lists into numpy arrays
data = np.array(data)
labels = np.array(labels)
print(data.shape, labels.shape)

#Splitting training and testing dataset
X_train, X_test, Y_train, Y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

#Converting the labels into one hot encoding
Y_train = to_categorical(Y_train, 43)
Y_test = to_categorical(Y_test, 43)

#Building the model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))
model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(rate=0.5))
model.add(Dense(43, activation='softmax'))

#Compilation of the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
eps = 15
history = model.fit(X_train, Y_train, batch_size=32, epochs=eps, validation_data=(X_test, Y_test))
model.save("/content/TrafficSignClassifierModel.keras")

#plotting graphs for accuracy
plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()
plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

#dictionary to label all traffic signs class.
classes = { 1:'Speed limit (20km/h)',
           2:'Speed limit (30km/h)',
           3:'Speed limit (50km/h)',
           4:'Speed limit (60km/h)',
           5:'Speed limit (70km/h)',
           6:'Speed limit (80km/h)',
           7:'End of speed limit (80km/h)',
           8:'Speed limit (100km/h)',
           9:'Speed limit (120km/h)',
           10:'No passing',
           11:'No passing veh over 3.5 tons',
           12:'Right-of-way at intersection',
           13:'Priority road',
           14:'Yield',
           15:'Stop',
           16:'No vehicles',
           17:'Veh > 3.5 tons prohibited',
           18:'No entry',
           19:'General caution',
           20:'Dangerous curve left',
           21:'Dangerous curve right',
           22:'Double curve',
           23:'Bumpy road',
           24:'Slippery road',
           25:'Road narrows on the right',
           26:'Road work',
           27:'Traffic signals',
           28:'Pedestrians',
           29:'Children crossing',
           30:'Bicycles crossing',
           31:'Beware of ice/snow',
           32:'Wild animals crossing',
           33:'End speed + passing limits',
           34:'Turn right ahead',
           35:'Turn left ahead',
           36:'Ahead only',
           37:'Go straight or right',
           38:'Go straight or left',
           39:'Keep right',
           40:'Keep left',
           41:'Roundabout mandatory',
           42:'End of no passing',
           43:'End no passing vehicle with a weight greater than 3.5 tons' }

#testing accuracy on test dataset
from sklearn.metrics import accuracy_score
y_test = pd.read_csv(cur_path + "/" + 'Test.csv')
labels = y_test["ClassId"].values
imgs = y_test["Path"].values
data=[]

for img in imgs:
    image = Image.open(cur_path + "/" + img)
    image = image.resize((30,30))
    data.append(np.array(image))

X_test=np.array(data)
predict_x=model.predict(X_test)
classes_x=np.argmax(predict_x,axis=1)

# Accuracy with the test data
from sklearn.metrics import accuracy_score
print(accuracy_score(labels, classes_x))

#One-by-one testing to also visualise the test sample, the predicted and true labels!
from random import randint

y_test = pd.read_csv(cur_path + "/" + 'Test.csv')
labels = y_test["ClassId"].values
imgs = y_test["Path"].values

a = randint(1, len(imgs) - 20)

for i in range(a, a + 20):
    data = []
    image = Image.open(cur_path + "/" + imgs[i])
    image = image.resize((30,30))
    data.append(np.array(image))

    X_test=np.array(data)
    predict_x = model.predict(np.expand_dims(X_test[0], axis=0))
    classes_x= np.argmax(predict_x,axis=1)

    plt.imshow(np.array(Image.open(cur_path + "/" + imgs[i])))
    plt.show()
    print("Prediction: " + classes[int(classes_x) + 1])
    print("True Label: " + classes[int(labels[i] + 1)])